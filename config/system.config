# Copyright (c) 2007-2013 Alysson Bessani, Eduardo Alchieri, Paulo Sousa, and the authors indicated in the @author tags
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


############################################
####### Fault Model Configurations   #######
############################################

#This sets if the system will function in Byzantine or crash-only mode. Set to "true" to support Byzantine faults
system.bft = true

############################################
####### Communication Configurations #######
############################################

#HMAC algorithm used to authenticate messages between processes ('HmacSHA512' is the default value)
system.communication.hmacAlgorithm = HmacSHA512

#Algorithm to generate secret keys used to generate MACs ('PBKDF2WithHmacSHA1' is the default value)
system.communication.secretKeyAlgorithm = PBKDF2WithHmacSHA1

#Signature algorithm used to verify clients requests and to perform the authenticated Diffie-Hellman exchange during
#replica start-up ('SHA512withRSA' is the default value). This parameter is overriden in the event that a custom key loader is supplied
system.communication.signatureAlgorithm = SHA512withRSA

# Algorithm used to compute hashes ('SHA-512' is the default value)
system.communication.hashAlgorithm = SHA-512

#HMAC algorithm provider ('SunJCE' is the default value)
system.communication.hmacAlgorithmProvider = SunJCE

#Secret keys algorith provider ('SunJCE' is the default value)
system.communication.secretKeyAlgorithmProvider = SunJCE

#Signature algorithm provider ('SunRsaSign' is the default value)
system.communication.signatureAlgorithmProvider = SunRsaSign

#Hash algorithm provider ('SUN' is the default value)
system.communication.hashAlgorithmProvider = SUN

#Specify if the communication system should use a thread to send data (true or false)
system.communication.useSenderThread = true

#Force all processes to use the same public/private keys pair and secret key. This is useful when deploying experiments
#and benchmarks, but must not be used in production systems. This parameter will only work with the default key loader.
system.communication.defaultkeys = true

#IP address this replica should bind to. If this parameter does not have a valid ip address,
#the replica will fetch the host address on its own. If config/hosts.config specifies the
#loopback address for the host machine, this parameter is overriden by that
system.communication.bindaddress = auto

############################################
### Replication Algorithm Configurations ###
############################################

#Number of servers in the group 
system.servers.num = 5

#Maximum number of faulty replicas 
system.servers.f = 1  

#Timeout to asking for a client request. This value should be greater than the batch timeout
system.totalordermulticast.timeout = 2000

#Batch timeout. If set to any non-positive integer value, the next consensus instance
#is triggered as soon as (1) the previous one is finished, and (2) any number new requests arrive,
#without waiting to accumulate more requests for the batch. This value should be lower than the request timeout
system.totalordermulticast.batchtimeout = -1

#Maximum batch size (in number of messages)
system.totalordermulticast.maxbatchsize = 400  

#Number of nonces (for non-determinism actions) generated
system.totalordermulticast.nonces = 10  

#if verification of leader-generated timestamps are increasing 
#it can only be used on systems in which the network clocks
#are synchronized 
system.totalordermulticast.verifyTimestamps = false

#Quantity of messages that can be stored in the receive queue of the communication system
system.communication.inQueueSize = 500000

# Quantity of messages that can be stored in the send queue of each replica
system.communication.outQueueSize = 500000

#Set to 1 if SMaRt should use signatures, set to 0 if otherwise
system.communication.useSignatures = 0

#Set to 1 if clients should use MAC vectors, set to 0 if otherwise
system.communication.useMACs = 1

#Print information about the replica when it is shutdown
system.shutdownhook = true

#Force all replicas to deliver to the application the same number of requests per batch.
#This is not the same batch used during the ordering protocol
system.samebatchsize = false

#Set to 'macvector' to use MAC vectors in the consensus proof, 'signatures' to use digital signatures
system.totalordermulticast.prooftype = signatures

#Size of the thread pool that transmits replies to clients. If set to 0, no thread pool is used and this
#done sequentially by the delivery thread instead.
system.numrepliers = 10

############################################
###### State Transfer Configurations #######
############################################

#Activate the state transfer protocol ('true' to activate, 'false' to de-activate)
system.totalordermulticast.state_transfer = true

#Maximum ahead-of-time message not discarded
system.totalordermulticast.highMark = 10000

#Maximum ahead-of-time message not discarded when the replica is still on EID 0 (after which the state transfer is triggered)
system.totalordermulticast.revival_highMark = 10

#Number of ahead-of-time messages necessary to trigger the state transfer after a request timeout occurs
system.totalordermulticast.timeout_highMark = 200

############################################
###### Log and Checkpoint Configurations ###
############################################

system.totalordermulticast.log = true
system.totalordermulticast.log_parallel = false
system.totalordermulticast.log_to_disk = false
system.totalordermulticast.sync_log = false

#Period at which BFT-SMaRt requests the state to the application (for the state transfer state protocol)
system.totalordermulticast.checkpoint_period = 1000
system.totalordermulticast.global_checkpoint_period = 120000

system.totalordermulticast.checkpoint_to_disk = false
system.totalordermulticast.sync_ckp = false


############################################
###### Reconfiguration Configurations ######
############################################

#The ID of the trust third party (TTP)
system.ttp.id = 7002

############################################
######      WHEAT Configurations      ######
############################################

#This tells the system to used weighted quorums
system.useweights = true

#Replicas ID for the initial view, separated by a comma.
#WHEAT: the first f (CFT) or 2f (BFT) entries obtain the weight Vmax and all others Vmin
# The number of replicas in this parameter should be equal to that specified in 'system.servers.num'
system.initial.view = 3,1,2,0,4

# The replica selected to be the leader of the initial view
system.initial.leader = 3

############################################
######       Dynamic Weights          ######
############################################

#Needs system.useweights for working
system.dw.useDynamicWeights = true

#Needs system.useweights for working
system.dw.useLeaderSelection = true


#server uses a distinct DUMMY_PROPOSE message for monitoring
system.dw.useDummyPropose = false

#server uses a distinct PROPOSE_RESPONSE message for monitoring
#Must be true in BFT mode
system.dw.useProposeResponse = false

#server uses a distinct WRITE_RESPONSE message for monitoring
#Must be true in BFT mode
system.dw.useWriteResponse = true


#Every x consensus, the calculation is triggered
system.dw.calculationInterval = 1000

#optimization threshold: 1.00 : always switch to the best; else switch if current config latency is higher than optimization
#goal times the best configs latency
system.dw.optimizationGoal = 1.00

#Monitoring interval: How many monitoring messages' latencies are being saved (window of last monitoring instances)
system.dw.monitoringWindow = 1000

#Synchronization Period
system.dw.synchronisationPeriod = 10000

#Synchronization Delay
system.dw.synchronisationDelay = 10000

#server bound monitoring overhead by omega (double) in interval [0,1]
#1 means, monitor every consensus, 0.67 means monitor roughly 2 out of 3 while 0.1 means every 10th consensus instance
system.dw.monitoringOverhead = 1.0

